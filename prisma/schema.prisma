generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       ProductReview[]
  cartItems     CartItem[]
  orders        Order[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                   String              @id @default(uuid())
  title                String
  description          String
  price                Float
  discountPercentage   Float               @default(0)
  rating               Float               @default(0) 
  stock                Int                 @default(0)
  thumbnail            String
  images               String[]            @default([])
  tags                 String[]            @default([])
  brand                String?             @default("Unknown")
  sku                  String?             @default("")
  weight               Float?              @default(0)
  warrantyInformation  String?             @default("")
  shippingInformation  String?             @default("")
  availabilityStatus   AvailabilityStatus? @default(InStock)
  returnPolicy         String?             @default("")
  minimumOrderQuantity Int?                @default(1)
  category             String?             @default("Uncategorized")

  dimensions ProductDimensions?
  meta       ProductMeta?
  reviews    ProductReview[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

enum AvailabilityStatus {
  InStock
  OutOfStock
  PreOrder
}

model ProductDimensions {
  id        String  @id @default(uuid())
  width     Float
  height    Float
  depth     Float
  productId String  @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductMeta {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  barcode   String
  qrCode    String
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductReview {
  id           String   @id @default(uuid())
  rating       Float
  comment      String
  reviewerName String
  productId    String
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Order {
  id              String      @id @default(uuid())
  userId          String
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippingAddress String
  paymentMethod   String

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
